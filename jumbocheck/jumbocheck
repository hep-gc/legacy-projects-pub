#!/usr/bin/env python
# vim: set expandtab ts=4 sw=4:

# Author: Ian Gable <igable@uvic.ca>
# Copyright (C) 2012 University of Victoria
# You may distribute under the terms of either the GNU General Public
# License or the Apache v2 License.

import subprocess
import re
import sys
import signal
from optparse import OptionParser

def main():
    jumbo_size = 8000
    regular_size = 64

    parser = OptionParser(usage="%prog -r REGULARMTU -j JUMBOMTU -f HOSTLISTFILE",version = "%prog 0.1")
    
    parser.add_option("-r", "--regular-mtu", dest="regular_size",
                                            help="regular packet size", metavar="REGULARMTU")
    parser.add_option("-j", "--jumbo-mtu", dest="jumbo_size",
                                            help="jumbo packet size", metavar="JUMBOMTU")
    parser.add_option("-f", "--file", dest="file",
                                            help="file containing a list of hosts", metavar="HOSTLISTFILE")
    
    (options, args) = parser.parse_args()
    
    if not options.file:
        parser.print_help()
        parser.error("You must specify a list of hosts to test with -f or --file")
    if options.regular_size:
        regular_size = int(options.regular_size)
    if options.jumbo_size:
        jumbo_size = int(options.jumbo_size)
  
    site_list = options.file
    
    try:
        file = open(site_list,'r')
    except IOError:
        sys.stderr.write("Does %s exist, and is it readable?\n" % site_list)
        sys.exit()
    
    loss = ""
    jumbo_loss = ""
    
    
    for line in file:
        
        # send 4 small packet
        ping_process = subprocess.Popen([r"ping", "-M", "do", "-s", str(regular_size), "-c", 
                                            "4", line.strip()],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output,error = ping_process.communicate();
        loss = re.search("Unreachable",output) or re.search(" 0 received",output)
        
        if not loss:
            #send 4 jumbo packets
            jumbo_ping_process = subprocess.Popen([r"ping", "-M", "do", "-s", str(jumbo_size), "-c", 
                                            "4", line.strip()],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            jumbo_output, jumbo_error = jumbo_ping_process.communicate();
            #jumbo_frag = re.search("Frag",jumbo_output)
            jumbo_frag = re.search("From (.+?) icmp_seq=1 Frag", jumbo_output)
            jumbo_loss =  re.search('100% packet loss', jumbo_output)
        
        if loss:
            print " x    x %s unreachable" % (line.strip().ljust(35))
        elif jumbo_frag:
            #print "%i    x %s fragmented" % (regular_size, line.strip().ljust(35))
            print "%i    x %s fragmented %s" % (regular_size, line.strip().ljust(35), jumbo_frag.group(1))
        elif jumbo_loss:
            print "%i    x %s jumbo_dropped" % (regular_size, line.strip().ljust(35))
        else:
            print "%i %i %s jumbo" % (regular_size,jumbo_size, line.strip().ljust(35))
        sys.stdout.flush()    
        jumbo_loss = ""
        loss = ""
    
    file.close()
 
#handle Crtl-C
def term_handler(signal, handler):
    sys.exit()


signal.signal(signal.SIGINT, term_handler)
main()   
